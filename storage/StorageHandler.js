// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var goLabLocalStorageKey, localStorage,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.golab = window.golab || {};

  window.golab.ils = window.golab.ils || {};

  window.golab.ils.storage = window.golab.ils.storage || {};

  window.golab.ils.storage.memory = window.golab.ils.storage.memory || {};

  /*
    Superclass for all storage handlers.
    A resource has the structure { id, content: {}, metadata: {} }.
  */


  window.golab.ils.storage.StorageHandler = (function() {
    function StorageHandler(metadataHandler) {
      this.createResource = __bind(this.createResource, this);
      this.readLatestResource = __bind(this.readLatestResource, this);
      this.getResourceBundle = __bind(this.getResourceBundle, this);
      var error;
      console.log("Initializing StorageHandler.");
      this._debug = true;
      try {
        metadataHandler.getMetadata();
        this.metadataHandler = metadataHandler;
      } catch (_error) {
        error = _error;
        throw "StorageHandler needs a MetadataHandler at construction!";
      }
    }

    StorageHandler.prototype.getMetadataHandler = function() {
      return this.metadataHandler;
    };

    StorageHandler.prototype.getResourceDescription = function(resource) {
      return {
        id: resource.id,
        title: resource.metadata.target.displayName,
        tool: resource.metadata.generator.displayName,
        modified: new Date(resource.metadata.published)
      };
    };

    StorageHandler.prototype.getResourceBundle = function(content, id) {
      var metadata;
      if (id == null) {
        id = ut.commons.utils.generateUUID();
      }
      content = JSON.parse(JSON.stringify(content));
      metadata = JSON.parse(JSON.stringify(this.metadataHandler.getMetadata()));
      metadata.published = (new Date()).toISOString();
      return {
        id: id,
        metadata: metadata,
        content: content
      };
    };

    StorageHandler.prototype.readLatestResource = function(objectType, cb) {
      var _this = this;
      if (this._debug) {
        console.log("StorageHandler: searching for latest resource of type '" + objectType + "'");
      }
      return this.listResourceMetaDatas(function(error, metadatas) {
        var date, entry, latestDate, latestId, _i, _len;
        if (error != null) {
          return setTimeout(function() {
            return cb(error, void 0);
          }, 0);
        } else {
          latestDate = new Date(1970, 0, 1);
          latestId = void 0;
          for (_i = 0, _len = metadatas.length; _i < _len; _i++) {
            entry = metadatas[_i];
            if ((objectType != null) && objectType !== entry.metadata.target.objectType) {
              continue;
            }
            if (entry.metadata.published != null) {
              date = new Date(entry.metadata.published);
              if (date > latestDate) {
                latestDate = date;
                latestId = entry.id;
              }
            }
          }
          if (latestId != null) {
            return _this.readResource(latestId, cb);
          } else {
            error = new Error("StorageHandler: no matching latest resource found.");
            return setTimeout(function() {
              return cb(error, void 0);
            }, 0);
          }
        }
      });
    };

    /*
      Reads a resource with a given id.
      Takes a callback with (err, resource). err is null or contains the error if
      any error occured. It is an error if there is no resource with given id.
    */


    StorageHandler.prototype.readResource = function(resourceId, cb) {
      throw "Abstract function - implement in subclass.";
    };

    /*
      Checks if there is a resource with given id.
      Takes a callback with (err, exists), where exists is true when there is a
      resource with given id, and false otherwise. err is null or contains the
      error if any error occured.
    */


    StorageHandler.prototype.resourceExists = function(resourceId, cb) {
      throw "Abstract function - implement in subclass.";
    };

    /*
      Creates a resource with the given content.
      Takes a callback with (err, resource), where resource is the newly created
      resource. err is null or contains the error if any error occured.
    */


    StorageHandler.prototype.createResource = function(content, cb) {
      throw "Abstract function - implement in subclass.";
    };

    /*
      Updates an existing resource with new content.
      Takes a callback with(err, resource), where resource is the updated
      resource. err is null or contains the error if any error occured.
    */


    StorageHandler.prototype.updateResource = function(resourceId, content, cb) {
      throw "Abstract function - implement in subclass.";
    };

    /*
      Calls back with the ids of all existing resources.
      Takes a callback with (err, ids). err is null or contains the error if any
      error occured.
    */


    StorageHandler.prototype.listResourceIds = function(cb) {
      throw "Abstract function - implement in subclass.";
    };

    /*
      Calls back with the metadata of all existing resources.
      Takes a callback with (err, metadatas), where metadatas is an Array of
      { id, metadata: {} } objects. err is null or contains the error if any error
      occured.
    */


    StorageHandler.prototype.listResourceMetaDatas = function(cb) {
      throw "Abstract function - implement in subclass.";
    };

    return StorageHandler;

  })();

  /*
    Implementation of an object storage handler
  */


  window.golab.ils.storage.ObjectStorageHandler = (function(_super) {
    __extends(ObjectStorageHandler, _super);

    function ObjectStorageHandler(metadataHandler, storeObject) {
      this.createResource = __bind(this.createResource, this);
      ObjectStorageHandler.__super__.constructor.apply(this, arguments);
      if (typeof storeObject !== "object") {
        throw "you must pass on an object to store the resources";
      }
      this.storeObject = storeObject;
      console.log("Initializing ObjectStorageHandler.");
      this;
    }

    ObjectStorageHandler.prototype.readResource = function(resourceId, cb) {
      var error;
      if (this.storeObject[resourceId]) {
        if (this._debug) {
          console.log("MemoryStorage: readResource " + resourceId);
        }
        return setTimeout(function() {
          return cb(null, JSON.parse(JSON.stringify(this.storeObject[resourceId])));
        }, 0);
      } else {
        error = new Error("MemoryStorage: readResource " + resourceId + " not found.");
        if (this._debug) {
          console.log(error);
        }
        return setTimeout(function() {
          return cb(error);
        }, 0);
      }
    };

    ObjectStorageHandler.prototype.resourceExists = function(resourceId, cb) {
      var exists;
      exists = this.storeObject[resourceId] !== void 0;
      return cb(null, exists);
    };

    ObjectStorageHandler.prototype.createResource = function(content, cb) {
      var error, resource;
      try {
        resource = this.getResourceBundle(content);
        if (this.storeObject[resource.id]) {
          error = new Error("MemoryStorage: resource already exists! " + resource.id);
          if (this._debug) {
            console.log(error);
          }
          return setTimeout(function() {
            return cb(error);
          }, 0);
        } else {
          this.storeObject[resource.id] = resource;
          if (this._debug) {
            console.log("MemoryStorage: resource created: " + resource);
          }
          if (this._debug) {
            console.log(resource);
          }
          return setTimeout(function() {
            return cb(null, resource);
          }, 0);
        }
      } catch (_error) {
        error = _error;
        error = new Error("MemoryStorage: resource NOT created: " + error);
        if (this._debug) {
          console.log(error);
        }
        return setTimeout(function() {
          return cb(error);
        }, 0);
      }
    };

    ObjectStorageHandler.prototype.updateResource = function(resourceId, content, cb) {
      var error, resource;
      if (this.storeObject[resourceId]) {
        resource = this.getResourceBundle(content, resourceId);
        this.storeObject[resourceId] = resource;
        console.log("MemoryStorage: updateResource " + resourceId);
        return setTimeout(function() {
          return cb(null, resource);
        }, 0);
      } else {
        error = new Error("MemoryStorage: updateResource failed, resource doesn't exist: " + resourceId);
        console.log(error);
        return setTimeout(function() {
          return cb(error);
        }, 0);
      }
    };

    ObjectStorageHandler.prototype.listResourceIds = function(cb) {
      var id, ids, resource;
      ids = (function() {
        var _ref, _results;
        _ref = this.storeObject;
        _results = [];
        for (id in _ref) {
          resource = _ref[id];
          _results.push(id);
        }
        return _results;
      }).call(this);
      return setTimeout(function() {
        return cb(null, ids);
      }, 0);
    };

    ObjectStorageHandler.prototype._listResourceMetaDatas = function(cb) {
      var id, metadatas, resource, _ref;
      metadatas = {};
      _ref = this.storeObject;
      for (id in _ref) {
        resource = _ref[id];
        metadatas[id] = JSON.parse(JSON.stringify(resource.metadata));
      }
      return setTimeout(function() {
        return cb(null, metadatas);
      }, 0);
    };

    ObjectStorageHandler.prototype.listResourceMetaDatas = function(cb) {
      var id, metadatas, resource, _ref;
      metadatas = [];
      _ref = this.storeObject;
      for (id in _ref) {
        resource = _ref[id];
        metadatas.push({
          id: id,
          metadata: JSON.parse(JSON.stringify(resource.metadata))
        });
      }
      return setTimeout(function() {
        return cb(null, metadatas);
      }, 0);
    };

    return ObjectStorageHandler;

  })(window.golab.ils.storage.StorageHandler);

  /*
    Implementation of a memory storage handler, which is a subclass of the object storage handler.
  */


  window.golab.ils.storage.MemoryStorageHandler = (function(_super) {
    __extends(MemoryStorageHandler, _super);

    function MemoryStorageHandler(metadataHandler) {
      MemoryStorageHandler.__super__.constructor.call(this, metadataHandler, {});
      console.log("Initializing MemoryStorageHandler, debug: " + this._debug + ".");
      this;
    }

    return MemoryStorageHandler;

  })(window.golab.ils.storage.ObjectStorageHandler);

  /*
    Implementation of a local (browser) storage handler.
  */


  if (false) {
    localStorage = localStorage || {};
  }

  goLabLocalStorageKey = "_goLab_";

  window.golab.ils.storage.LocalStorageHandler = (function(_super) {
    __extends(LocalStorageHandler, _super);

    function LocalStorageHandler(metadataHandler) {
      this.createResource = __bind(this.createResource, this);
      LocalStorageHandler.__super__.constructor.apply(this, arguments);
      console.log("Initializing LocalStorageHandler.");
      this.localStorage = window.localStorage;
      this;
    }

    LocalStorageHandler.prototype.readResource = function(resourceId, cb) {
      var error;
      if (this.localStorage[goLabLocalStorageKey + resourceId]) {
        if (this._debug) {
          console.log("LocalStorageHandler: readResource " + resourceId);
        }
        return setTimeout(function() {
          return cb(null, JSON.parse(this.localStorage[goLabLocalStorageKey + resourceId]));
        }, 0);
      } else {
        error = new Error("LocalStorageHandler: readResource " + resourceId + " not found.");
        if (this._debug) {
          console.log(error);
        }
        return setTimeout(function() {
          return cb(error);
        }, 0);
      }
    };

    LocalStorageHandler.prototype.resourceExists = function(resourceId, cb) {
      var exists;
      exists = this.localStorage[goLabLocalStorageKey + resourceId] !== void 0;
      return setTimeout(function() {
        return cb(null, exists);
      }, 0);
    };

    LocalStorageHandler.prototype.createResource = function(content, cb) {
      var error, resource, resourceId;
      try {
        resource = this.getResourceBundle(content);
        resourceId = resource.id;
        if (this.localStorage[goLabLocalStorageKey + resourceId]) {
          error = new Error("LocalStorageHandler: resource already exists! " + resource.id);
          if (this._debug) {
            console.log(error);
          }
          return setTimeout(function() {
            return cb(error);
          }, 0);
        } else {
          this.localStorage[goLabLocalStorageKey + resourceId] = JSON.stringify(resource);
          if (this._debug) {
            console.log("LocalStorageHandler: resource created: " + resource);
          }
          if (this._debug) {
            console.log(resource);
          }
          return setTimeout(function() {
            return cb(null, resource);
          }, 0);
        }
      } catch (_error) {
        error = _error;
        error = new Error("LocalStorageHandler: resource NOT created: " + error);
        if (this._debug) {
          console.log(error);
        }
        return setTimeout(function() {
          return cb(error);
        }, 0);
      }
    };

    LocalStorageHandler.prototype.updateResource = function(resourceId, content, cb) {
      var error, resource;
      if (this.localStorage[goLabLocalStorageKey + resourceId]) {
        resource = this.getResourceBundle(content, resourceId);
        this.localStorage[goLabLocalStorageKey + resourceId] = JSON.stringify(resource);
        console.log("LocalStorageHandler: updateResource " + resourceId);
        return setTimeout(function() {
          return cb(null, resource);
        }, 0);
      } else {
        error = new Error("LocalStorageHandler: updateResource failed, resource doesn't exist: " + resourceId);
        console.log(error);
        return setTimeout(function() {
          return cb(error);
        }, 0);
      }
    };

    LocalStorageHandler.prototype.isGoLabKey = function(key) {
      return key.indexOf(goLabLocalStorageKey) === 0;
    };

    LocalStorageHandler.prototype.listResourceIds = function(cb) {
      var id, ids, resourceString, stripPrefix;
      stripPrefix = function(id) {
        return id.substr(goLabLocalStorageKey.length);
      };
      ids = (function() {
        var _ref, _results;
        _ref = this.localStorage;
        _results = [];
        for (id in _ref) {
          resourceString = _ref[id];
          if (this.isGoLabKey(id)) {
            _results.push(stripPrefix(id));
          }
        }
        return _results;
      }).call(this);
      return setTimeout(function() {
        return cb(null, ids);
      }, 0);
    };

    LocalStorageHandler.prototype._listResourceMetaDatas = function(cb) {
      var id, metadatas, resource, resourceString, _ref;
      metadatas = {};
      _ref = this.localStorage;
      for (id in _ref) {
        resourceString = _ref[id];
        if (!(this.isGoLabKey(id))) {
          continue;
        }
        resource = JSON.parse(resourceString);
        metadatas[resource.id] = {
          id: resource.id,
          metadata: resource.metadata
        };
      }
      return setTimeout(function() {
        return cb(null, metadatas);
      }, 0);
    };

    LocalStorageHandler.prototype.listResourceMetaDatas = function(cb) {
      var id, metadatas, resource, resourceString, _ref;
      metadatas = [];
      _ref = this.localStorage;
      for (id in _ref) {
        resourceString = _ref[id];
        if (!(this.isGoLabKey(id))) {
          continue;
        }
        resource = JSON.parse(resourceString);
        metadatas.push({
          id: resource.id,
          metadata: resource.metadata
        });
      }
      return setTimeout(function() {
        return cb(null, metadatas);
      }, 0);
    };

    return LocalStorageHandler;

  })(window.golab.ils.storage.StorageHandler);

}).call(this);

/*
//@ sourceMappingURL=StorageHandler.map
*/
