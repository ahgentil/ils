// Generated by CoffeeScript 1.6.3
/* example metadata
  {
    "actor":
    {
      "objectType": "person",
      "id": "f25d7eff-8859-49ed-85e9-e7c1f92bc334",
      "displayName": "anonymized"
    },
    "target":
    {
      "objectType": "conceptMap",
      "id": "9383fbbe-e071-49b2-9770-46ddc4f8cd6e",
      "displayName": "unnamed concept map"
    },
    "generator":
    {
      "objectType": "application",
      "url": document.URL,
      "id": "04123e9e-14d0-447b-a851-805b9262d9a6",
      "displayName": "ut.tools.conceptmapper"
    },
    "provider":
    {
      "objectType": "ils",
      "url": "http://graasp.epfl.ch/metawidget/1/b387b6f...",
      "id": "0f8184db-53ba-4868-9208-896c3d7c25bb",
      "displayName": "name-of-ils"
    }
  }
*/


(function() {
  "use strict";
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.golab = window.golab || {};

  window.golab.ils = window.golab.ils || {};

  window.golab.ils.metadata = window.golab.ils.metadata || {};

  window.golab.ils.metadata.MetadataHandler = (function() {
    function MetadataHandler(metadata, cb) {
      console.log("Initializing MetadataHandler.");
      if (metadata) {
        this._metadata = JSON.parse(JSON.stringify(metadata));
      } else {
        throw "MetadataHandler needs a initial metadata at construction!";
      }
      if (window["sessionId"]) {
        this._metadata.provider.id = window["sessionId"];
      }
      setTimeout(function() {
        if (cb) {
          return cb(null, this);
        }
      }, 0);
      this;
    }

    MetadataHandler.prototype.setMetadata = function(newMetadata) {
      this._metadata = JSON.parse(JSON.stringify(newMetadata));
      return this;
    };

    MetadataHandler.prototype.mergeMetadata = function(newMetadata) {
      throw "not implemented yet.";
      return this;
    };

    MetadataHandler.prototype.getMetadata = function() {
      return this._metadata;
    };

    MetadataHandler.prototype.getActor = function() {
      return this._metadata.actor;
    };

    MetadataHandler.prototype.getTarget = function() {
      return this._metadata.target;
    };

    MetadataHandler.prototype.getGenerator = function() {
      return this._metadata.generator;
    };

    MetadataHandler.prototype.getProvider = function() {
      return this._metadata.provider;
    };

    MetadataHandler.prototype.getTargetDisplayName = function() {
      return this._metadata.target.displayName;
    };

    MetadataHandler.prototype.setTargetDisplayName = function(newName) {
      return this._metadata.target.displayName = newName;
    };

    return MetadataHandler;

  })();

  window.golab.ils.metadata.GoLabMetadataHandler = (function(_super) {
    __extends(GoLabMetadataHandler, _super);

    function GoLabMetadataHandler(metadata, cb) {
      var _this = this;
      if (metadata.provider == null) {
        metadata.provider = {
          objectType: 'ils'
        };
      }
      if (metadata.actor == null) {
        metadata.actor = {
          objectType: 'person'
        };
      }
      if (typeof osapi !== "undefined" && osapi !== null) {
        osapi.context.get().execute(function(result) {
          metadata.provider.id = result.contextId;
          return osapi.people.getViewer().execute(function(viewer) {
            metadata.actor.id = viewer.id;
            metadata.displayName = viewer.displayName;
            GoLabMetadataHandler.__super__.constructor.call(_this, metadata);
            return cb(null, _this);
          });
        });
      } else {
        console.warn("Could not get infos from osapi, using given metadata.");
        GoLabMetadataHandler.__super__.constructor.call(this, metadata);
        cb(null, this);
      }
    }

    return GoLabMetadataHandler;

  })(window.golab.ils.metadata.MetadataHandler);

}).call(this);

/*
//@ sourceMappingURL=MetadataHandler.map
*/
