// Generated by CoffeeScript 1.9.0

/* example metadata
  {
    "id": "f25d7eff-8859-49ed-85e9-e7c1f92bc111",
    "published": "2014-06-05T13:15:30Z",
    "actor":
    {
      "objectType": "person",
      "id": "f25d7eff-8859-49ed-85e9-e7c1f92bc334",
      "displayName": "anonymized"
    },
    "target":
    {
      "objectType": "conceptMap",
      "id": "9383fbbe-e071-49b2-9770-46ddc4f8cd6e",
      "displayName": "unnamed concept map"
    },
    "generator":
    {
      "objectType": "application",
      "url": document.URL,
      "id": "04123e9e-14d0-447b-a851-805b9262d9a6",
      "displayName": "ut.tools.conceptmapper"
    },
    "provider":
    {
      "objectType": "ils",
      "url": "http://graasp.epfl.ch/metawidget/1/b387b6f...",
      "id": "0f8184db-53ba-4868-9208-896c3d7c25bb",
      "inquiryPhase": "Orientation"
      "inquiryPhaseId": "543e7058ab0f540000e5821c"
      "inquiryPhaseName": "MyOrientation"
      "displayName": "name-of-ils"
    }
  }
 */


/* example ils and space data
old graasp
//////////
ils:
	description: ""
	displayName: "ILS test"
	id: "19122"
	metadata: null
	objectId: 19122
	parentId: 934
	parentType: "@person"
	profileUrl: "http://graasp.epfl.ch/#item=space_19122"
	spacetype: "ils"
	updated: "2014-10-16T11:33:33+02:00"
	visibilityLevel: "public"

phase:
	description: "<div id="hypo-graasp-ch" class="wiki_widget"><iframe name="9190" src="http://graasp.epfl.ch/sharedapp/fb3f1a00319782d2b306b7d3920dbc62c83ae21c" width="800" height="600"></iframe></div>
	"displayName: "MyOrientation"
	id: "19123"
  // metadata might be null if it's a manually added space
	metadata: "{"type":"Orientation"}"
	objectId: 19123
	parentId: 19122
	parentType: "@space"
	profileUrl: "http://graasp.epfl.ch/#item=space_19123"
	spacetype: "folder"
	updated: "2014-10-16T11:33:33+02:00"
	visibilityLevel: "public"


new graasp
//////////
ils:
	created: "2014-10-15T13:02:16.612Z"
	description: ""
	displayName: "test graasp-eu-library"
	id: "543e7058ab0f540000e58217"
	ilsRef: Object
		__v: 0
		_id: "543e70582e2c55fc49b62595"
		lang: "en"
		modified: "2014-10-15T13:02:16.680Z"
		spaceRef: "543e7058ab0f540000e58217"
		userRef: "5405e1e0da3a95cf9050e5f2"
  metadata: Object
		type: "ils"
	parentId: "5405e1ada5ecce255b4a7222"
	parentType: "@space"
	profileUrl: "http://graasp.eu/spaces/543e7058ab0f540000e58217"
	spaceType: "ils"
	updated: "2014-10-15T13:02:16.865Z"
	visibilityLevel: "public"

phase:
	created: "2014-10-15T13:02:16.678Z"
	description: "Welcome to the Orientation phase. You can describe here what students have to do in the Orientation phase."
	displayName: "MyOrientation"
	id: "543e7058ab0f540000e5821c"
	// metadata might be missing if it's a manually added phase space
  metadata:
		type: "Orientation"
	parentId: "543e7058ab0f540000e58217"
	parentType: "@space"
	profileUrl: "http://graasp.eu/spaces/543e7058ab0f540000e5821c"
	spaceType: "folder"
	updated: "2014-10-15T13:02:45.001Z"
	visibilityLevel: "public"
 */

(function() {
  "use strict";
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  window.golab = window.golab || {};

  window.golab.ils = window.golab.ils || {};

  window.golab.ils.metadata = window.golab.ils.metadata || {};

  window.golab.ils.context = window.golab.ils.context || {};

  window.golab.ils.context.graasp = "graasp";

  window.golab.ils.context.ils = "ils";

  window.golab.ils.context.preview = "preview";

  window.golab.ils.context.direct = "direct";

  window.golab.ils.context.standalone = "standalone";

  window.golab.ils.context.unknown = "unknown";

  window.golab.ils.metadata.MetadataHandler = (function() {
    var getParameterFromUrl;

    function MetadataHandler(metadata, cb) {
      this.getContext = __bind(this.getContext, this);
      this.identifyContext = __bind(this.identifyContext, this);
      this._debug = true;
      if (this._debug) {
        console.log("Initializing MetadataHandler.");
      }
      this._context = this._context || this.identifyContext();
      if (metadata) {
        this._metadata = JSON.parse(JSON.stringify(metadata));
      } else {
        throw "MetadataHandler needs an initial set of metadata at construction!";
      }
      setTimeout((function(_this) {
        return function() {
          if (cb) {
            return cb(null, _this);
          }
        };
      })(this), 0);
      if (this._debug) {
        console.log("MetadataHandler construction for " + this._metadata.generator.displayName + " complete. Using the following metadata:");
        console.log(this._metadata);
        console.log("context: " + (this.getContext()));
      }
      this;
    }

    MetadataHandler.prototype.identifyContext = function() {
      var contextURLParameter;
      this._context = null;
      contextURLParameter = getParameterFromUrl("context");
      if (contextURLParameter) {
        switch (contextURLParameter.toLowerCase()) {
          case window.golab.ils.context.graasp:
          case window.golab.ils.context.ils:
          case window.golab.ils.context.preview:
          case window.golab.ils.context.direct:
          case window.golab.ils.context.standalone:
          case window.golab.ils.context.unknown:
            this._context = contextURLParameter.toLowerCase();
            break;
          default:
            console.warn("unknown url context parameter value: " + contextURLParameter);
        }
      }
      if (!this._context) {
        if (this._debug) {
          console.log("MetadataHandler.identifyContext. document.referrer:");
          console.log(document.referrer);
        }
        if (typeof osapi === "undefined" || osapi === null) {
          this._context = window.golab.ils.context.standalone;
        } else if (document.referrer.indexOf("golabz.eu") !== -1) {
          this._context = window.golab.ils.context.preview;
        } else if (document.referrer.indexOf("ils") !== -1) {
          this._context = window.golab.ils.context.ils;
        } else if (document.referrer.indexOf("graasp.eu") !== -1) {
          this._context = window.golab.ils.context.graasp;
        } else if (document.referrer === "") {
          this._context = window.golab.ils.context.direct;
        } else {
          this._context = window.golab.ils.context.unknown;
        }
      }
      if (this._debug) {
        console.log("identified context:");
        return console.log(this._context);
      }
    };

    MetadataHandler.prototype.getContext = function() {
      return this._context;
    };

    getParameterFromUrl = function(key) {
      var parameter, part, partParts, parts, queryPart, _i, _len;
      key = key.toLowerCase();
      parameter = null;
      queryPart = location.search.trim().toLowerCase();
      if (queryPart && queryPart[0] === "?") {
        parts = queryPart.substring(1).split("&");
        for (_i = 0, _len = parts.length; _i < _len; _i++) {
          part = parts[_i];
          partParts = part.split("=");
          if (partParts.length === 2 && partParts[0] === key) {
            parameter = partParts[1];
          }
        }
      }
      return parameter;
    };

    MetadataHandler.prototype.setId = function(newId) {
      this._metadata.id = newId;
      return this;
    };

    MetadataHandler.prototype.getId = function() {
      return this._metadata.id;
    };

    MetadataHandler.prototype.setMetadata = function(newMetadata) {
      this._metadata = JSON.parse(JSON.stringify(newMetadata));
      return this;
    };

    MetadataHandler.prototype.getMetadata = function() {
      return this._metadata;
    };

    MetadataHandler.prototype.setActor = function(newActor) {
      return this._metadata.actor = newActor;
    };

    MetadataHandler.prototype.getActor = function() {
      return this._metadata.actor;
    };

    MetadataHandler.prototype.getTarget = function() {
      return this._metadata.target;
    };

    MetadataHandler.prototype.setTarget = function(newTarget) {
      return this._metadata.target = JSON.parse(JSON.stringify(newTarget));
    };

    MetadataHandler.prototype.getGenerator = function() {
      return this._metadata.generator;
    };

    MetadataHandler.prototype.getProvider = function() {
      return this._metadata.provider;
    };

    MetadataHandler.prototype.getTargetDisplayName = function() {
      return this._metadata.target.displayName;
    };

    MetadataHandler.prototype.setTargetDisplayName = function(newName) {
      return this._metadata.target.displayName = newName;
    };

    MetadataHandler.prototype.setTargetId = function(newId) {
      return this._metadata.target.id = newId;
    };

    MetadataHandler.prototype.setMetadataFlag = function(flag, value) {
      this._metadata.flags = this._metadata.flags || {};
      return this._metadata.flags[flag] = value;
    };

    MetadataHandler.prototype.getMetadataFlag = function(flag) {
      this._metadata.flags = this._metadata.flags || {};
      return this._metadata.flags[flag];
    };

    return MetadataHandler;

  })();

  window.golab.ils.metadata.GoLabMetadataHandler = (function(_super) {
    __extends(GoLabMetadataHandler, _super);

    function GoLabMetadataHandler(metadata, cb) {
      var error;
      this.identifyContext();
      if (typeof osapi !== "undefined" && osapi !== null) {
        try {
          if (!$.cookie) {
            throw "jquery.cookie library needs to be present before using the (GoLab)MetadataHandler (needed by ILS library).";
          }
          if (!ils) {
            throw "ILS library needs to be present before using the (GoLab)MetadataHandler.";
          }
          ils.getAppContextParameters((function(_this) {
            return function(context) {
              console.log("received appContextParameters from ILS library:");
              console.log(context);
              metadata.actor.displayName = context.actor.displayName;
              metadata.actor.id = context.actor.id;
              metadata.actor.objectType = context.actor.objectType;
              metadata.provider.displayName = context.provider.displayName;
              metadata.provider.id = context.provider.id;
              metadata.provider.objectType = context.provider.objectType;
              metadata.provider.inquiryPhase = context.provider.inquiryPhase;
              metadata.provider.inquiryPhaseId = context.provider.inquiryPhaseId;
              metadata.provider.inquiryPhaseName = context.provider.inquiryPhaseName;
              metadata.provider.url = context.provider.url;
              if (context.provider.id === void 0 || context.provider.id === "unknown") {
                console.log("MetadataHandler: preview context");
                metadata.provider.objectType = "unknown";
                metadata.provider.id = "unknown";
                metadata.provider.displayName = "unknown";
                metadata.provider.url = window.location.href;
                metadata.generator.url = gadgets.util.getUrlParameters().url;
                metadata.provider.inquiryPhase = void 0;
                metadata.provider.inquiryPhaseId = void 0;
                metadata.provider.inquiryPhaseName = void 0;
              } else if (context.provider.inquiryPhaseId === void 0 || context.provider.inquiryPhaseId === "unknown") {
                console.log("MetadataHandler: ILS metawidget context");
                metadata.provider.inquiryPhase = "ils";
                metadata.provider.inquiryPhaseId = void 0;
                metadata.provider.inquiryPhaseName = void 0;
                metadata.generator.displayName = metadata.provider.displayName;
                metadata.generator.id = metadata.provider.id;
                metadata.generator.objectType = "ils";
                metadata.generator.url = metadata.provider.url;
              } else {
                console.log("MetadataHandler: application context");
                metadata.generator.id = context.generator.id;
                metadata.generator.objectType = context.generator.objectType;
                metadata.generator.url = context.generator.url;
              }
              metadata.storageId = context.storageId;
              metadata.storageType = context.storageType;
              GoLabMetadataHandler.__super__.constructor.call(_this, metadata);
              return cb(null, _this);
            };
          })(this));
        } catch (_error) {
          error = _error;
          console.warn("error during metadata retrieval:");
          console.warn(error);
          console.log("metadata so far:");
          console.log(metadata);
        }
      } else {
        if (this._debug) {
          console.log("Running outside osapi/ils, using given metadata.");
        }
        GoLabMetadataHandler.__super__.constructor.call(this, metadata);
        cb(null, this);
      }
    }

    GoLabMetadataHandler.prototype.old_constructor = function(metadata, cb) {
      var error, findUsername;
      this.identifyContext();
      if (typeof osapi !== "undefined" && osapi !== null) {
        try {
          if (!$.cookie) {
            throw "jquery.cookie library needs to be present before using the (GoLab)MetadataHandler (needed by ILS library).";
          }
          if (!ils) {
            throw "ILS library needs to be present before using the (GoLab)MetadataHandler.";
          }
          ils.getAppContextParameters(function(context) {
            console.log("received appContextParameters from ILS library:");
            return console.log(context);
          });
          findUsername = $.Deferred();
          if (this.getContext() === window.golab.ils.context.ils) {
            ils.getCurrentUser((function(_this) {
              return function(userResult) {
                if (userResult.error) {
                  console.warn("error reading username: " + userResult.error);
                  return findUsername.resolve("unknown");
                } else {
                  return findUsername.resolve(userResult);
                }
              };
            })(this));
          } else if (this.getContext() === window.golab.ils.context.graasp) {
            osapi.people.get({
              userId: '@viewer'
            }).execute(function(person) {
              return findUsername.resolve(person.displayName);
            });
          } else {
            findUsername.resolve("unknown");
          }
          return findUsername.done((function(_this) {
            return function(userName) {
              metadata.actor.displayName = userName;
              return ils.getIls(function(ilsSpace, phaseSpace) {
                return ils.getAppId(function(appId) {
                  var actorId;
                  if (appId.error != null) {
                    console.warn("Couldn't get the appId, using the default (random) id.");
                    console.warn(appId.error);
                  } else {
                    metadata.generator.id = appId;
                  }
                  if (_this._debug) {
                    console.log("GoLab-MetadataHandler: ilsSpace, phaseSpace:");
                    console.log(ilsSpace);
                    console.log(phaseSpace);
                  }
                  if (ilsSpace.error != null) {
                    if (_this._debug) {
                      console.log("MetadataHandler: golabz.eu preview.");
                    }
                    metadata.provider.objectType = "preview";
                    metadata.provider.id = "undefined";
                    metadata.provider.displayName = "undefined";
                    metadata.provider.url = window.location.href;
                    metadata.generator.url = gadgets.util.getUrlParameters().url;
                    metadata.provider.inquiryPhase = "undefined";
                    metadata.provider.inquiryPhaseId = "undefined";
                    metadata.provider.inquiryPhaseName = "undefined";
                  } else if (ilsSpace.objectId != null) {
                    metadata.provider.objectType = ilsSpace.spaceType;
                    metadata.provider.id = ilsSpace.id;
                    metadata.provider.displayName = ilsSpace.displayName;
                    metadata.provider.url = ilsSpace.profileUrl;
                    if ((phaseSpace != null) && phaseSpace.spaceType === "folder") {
                      if (_this._debug) {
                        console.log("MetadataHandler: old Graasp, phase space.");
                      }
                      metadata.generator.url = gadgets.util.getUrlParameters().url;
                      if (phaseSpace.metadata) {
                        metadata.provider.inquiryPhase = JSON.parse(phaseSpace.metadata).type;
                      } else {
                        metadata.provider.inquiryPhase = "unknown";
                      }
                    } else {
                      if (_this._debug) {
                        console.log("MetadataHandler: old Graasp, ILS space.");
                      }
                      metadata.provider.inquiryPhase = "ils";
                      metadata.generator = {};
                      metadata.generator.objectType = metadata.provider.objectType;
                      metadata.generator.url = metadata.provider.url;
                      metadata.generator.id = metadata.provider.id;
                      metadata.generator.displayName = metadata.provider.displayName;
                      metadata.target = metadata.generator;
                    }
                  } else {
                    metadata.provider.objectType = ilsSpace.spaceType;
                    metadata.provider.id = ilsSpace.id;
                    metadata.provider.displayName = ilsSpace.displayName;
                    metadata.provider.url = ilsSpace.profileUrl;
                    if ((phaseSpace != null) && phaseSpace.spaceType === "folder") {
                      console.log("MetadataHandler: new Graasp, phase space.");
                      metadata.generator.url = gadgets.util.getUrlParameters().url;
                      metadata.provider.inquiryPhaseId = phaseSpace.id;
                      metadata.provider.inquiryPhaseName = phaseSpace.displayName;
                      if (phaseSpace.metadata != null) {
                        metadata.provider.inquiryPhase = phaseSpace.metadata.type;
                      } else {
                        metadata.provider.inquiryPhase = "unknown";
                      }
                    } else {
                      console.log("MetadataHandler: new Graasp, ILS space.");
                      metadata.provider.inquiryPhase = "ils";
                      metadata.generator = {};
                      metadata.generator.objectType = metadata.provider.objectType;
                      metadata.generator.url = metadata.provider.url;
                      metadata.generator.id = metadata.provider.id;
                      metadata.generator.displayName = metadata.provider.displayName;
                      metadata.target = metadata.generator;
                    }
                  }
                  actorId = metadata.actor.displayName + "@" + metadata.provider.id;
                  metadata.actor.id = actorId;
                  GoLabMetadataHandler.__super__.old_constructor.call(_this, metadata);
                  return cb(null, _this);
                });
              });
            };
          })(this));
        } catch (_error) {
          error = _error;
          console.warn("error during metadata retrieval:");
          console.warn(error);
          console.log("metadata so far:");
          return console.log(metadata);
        }
      } else {
        if (this._debug) {
          console.log("Running outside osapi/ils, using given metadata.");
        }
        GoLabMetadataHandler.__super__.old_constructor.call(this, metadata);
        return cb(null, this);
      }
    };

    return GoLabMetadataHandler;

  })(window.golab.ils.metadata.MetadataHandler);

  window.golab.ils.metadata.LocalMetadataHandler = (function(_super) {
    __extends(LocalMetadataHandler, _super);

    function LocalMetadataHandler(metadata, cb) {
      var actorId, getIdentifyingUrl, removeQueryAndFragmentFromUrl, userNickname, windowTitle;
      this.identifyContext();
      getIdentifyingUrl = function() {
        var path, subPaths;
        path = window.location.pathname;
        subPaths = window.location.pathname.split("/");
        if (subPaths.length > 1) {
          switch (subPaths[1].toLocaleLowerCase()) {
            case "production":
              path = subPaths[1];
              break;
            case "experiments":
              path = subPaths[1];
              if (subPaths.length > 2) {
                path += "/" + subPaths[2];
              }
              break;
            default:
              path = "";
          }
        }
        return (window.location.protocol + "//" + window.location.host + "/" + path).toLowerCase();
      };
      metadata.provider.id = getIdentifyingUrl();
      if ((this.getParameterFromUrl("provider") != null)) {
        metadata.provider.id = this.getParameterFromUrl("provider");
      }
      if (document.title != null) {
        metadata.provider.displayName = document.title;
      } else {
        metadata.provider.displayName = "unnamed";
      }
      if ((this.getParameterFromUrl("username") != null)) {
        userNickname = this.getParameterFromUrl("username");
      } else {
        userNickname = localStorage.getItem('goLabNickName');
        if (!userNickname) {
          while (!userNickname) {
            userNickname = prompt("Please enter nick name:");
            if (userNickname) {
              userNickname = userNickname.trim();
            }
          }
          localStorage.setItem('goLabNickName', userNickname);
        }
      }
      userNickname = userNickname.trim();
      windowTitle = window.document.title;
      if (!windowTitle || windowTitle[0] !== "[") {
        window.document.title = "[" + userNickname + "] " + windowTitle;
      }
      metadata.actor.displayName = userNickname;
      actorId = userNickname.toLowerCase() + "@" + metadata.provider.id;
      metadata.actor.id = actorId;
      removeQueryAndFragmentFromUrl = function(url) {
        var removePart, urlString;
        urlString = "" + url;
        removePart = function(character) {
          var lastIndex;
          lastIndex = urlString.lastIndexOf(character);
          if (lastIndex >= 0) {
            return urlString = urlString.substr(0, lastIndex);
          }
        };
        removePart("?");
        removePart("#");
        return urlString;
      };
      metadata.generator.id = metadata.generator.displayName + "@" + removeQueryAndFragmentFromUrl(metadata.provider.url);
      LocalMetadataHandler.__super__.constructor.call(this, metadata);
      cb(null, this);
    }

    LocalMetadataHandler.prototype.getParameterFromUrl = function(key) {
      var parameter, part, partParts, parts, queryPart, _i, _len;
      key = key.toLowerCase();
      parameter = null;
      queryPart = location.search.trim().toLowerCase();
      if (queryPart && queryPart[0] === "?") {
        parts = queryPart.substring(1).split("&");
        for (_i = 0, _len = parts.length; _i < _len; _i++) {
          part = parts[_i];
          partParts = part.split("=");
          if (partParts.length === 2 && partParts[0] === key) {
            parameter = partParts[1];
          }
        }
      }
      return parameter;
    };

    return LocalMetadataHandler;

  })(window.golab.ils.metadata.MetadataHandler);

}).call(this);

//# sourceMappingURL=MetadataHandler.js.map
