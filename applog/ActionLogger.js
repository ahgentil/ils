// Generated by CoffeeScript 1.9.0
(function() {
  "use strict";
  var _base,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if (window.ut == null) {
    window.ut = {};
  }

  if ((_base = window.ut).commons == null) {
    _base.commons = {};
  }

  window.ut.commons.actionlogging = window.ut.commons.actionlogging || {};

  window.ut.commons.actionlogging.collideUrl = "http://golab.collide.info/activity";

  window.ut.commons.actionlogging.ActionLogger = (function() {
    function ActionLogger(metadataHandler) {
      this.log = __bind(this.log, this);
      var error;
      this._debug = true;
      console.log("Initializing ActionLogger.");
      console.log("...setting default logging target: nullLogging.");
      try {
        metadataHandler.getMetadata();
        this.metadataHandler = metadataHandler;
      } catch (_error) {
        error = _error;
        throw "ActionLogger needs a MetadataHandler at construction!";
      }
      this.loggingTarget = this.nullLogging;
      this.loggingUrl = null;
      this.loggedApplicationStarted = false;
      this.logListeners = [];
    }

    ActionLogger.prototype.addLogListener = function(logListener) {
      return this.logListeners.push(logListener);
    };

    ActionLogger.prototype.removeLogListener = function(logListener) {
      var index;
      index = this.logListeners.indexOf(logListener);
      if (index >= 0) {
        return this.logListeners.splice(index, 1);
      }
    };

    ActionLogger.prototype.setLoggingTarget = function(newLoggingTarget) {
      if (typeof newLoggingTarget === "string") {
        if (this._debug) {
          console.log("setLoggingTarget(" + newLoggingTarget + ")");
        }
        return this.loggingTarget = (function() {
          switch (newLoggingTarget.toLowerCase()) {
            case "null":
              return this.nullLogging;
            case "console":
              return this.consoleLogging;
            case "consoleshort":
              return this.consoleLoggingShort;
            case "consoleobject":
              return this.consoleLoggingObject;
            case "dufftown":
              this.loggingUrl = window.ut.commons.actionlogging.collideUrl;
              return this.httpPostLogging;
            case "opensocial":
              return this.opensocialLogging;
            default:
              this.loggingUrl = newLoggingTarget;
              return this.httpPostLogging;
          }
        }).call(this);
      } else {
        return this.loggingTarget = newLoggingTarget;
      }
    };

    ActionLogger.prototype.setLoggingTargetByName = function(newLoggingTargetName) {
      if (this._debug) {
        console.log("ActionLogger: setting logging target (by name) to " + newLoggingTargetName);
      }
      if (newLoggingTargetName === "null") {
        return this.loggingTarget = this.nullLogging;
      } else if (newLoggingTargetName === "console") {
        return this.loggingTarget = this.consoleLogging;
      } else if (newLoggingTargetName === "consoleShort") {
        return this.loggingTarget = this.consoleLoggingShort;
      } else if (newLoggingTargetName === "dufftown") {
        return this.loggingTarget = this.dufftownLogging;
      } else if (newLoggingTargetName === "opensocial") {
        return this.loggingTarget = this.opensocialLogging;
      } else {
        console.warn("ActionLogger: unknown logging target, setting to 'null'.");
        return this.loggingTarget = this.nullLogging;
      }
    };

    ActionLogger.prototype.checkVerb = function(verb) {
      var verbAccepted, verbKey, verbValue, _ref;
      verbAccepted = false;
      _ref = this.verbs;
      for (verbKey in _ref) {
        verbValue = _ref[verbKey];
        if (verb === verbValue) {
          verbAccepted = true;
        }
      }
      if (!verbAccepted) {
        return console.warn("ActionLogger: unknown verb: " + verb);
      }
    };

    ActionLogger.prototype.createActivityStreamObject = function(verb, object) {
      var activityStreamObject;
      activityStreamObject = {};
      activityStreamObject.published = new Date().toISOString();
      activityStreamObject.actor = this.metadataHandler.getActor();
      activityStreamObject.verb = verb;
      activityStreamObject.object = object;
      activityStreamObject.target = this.metadataHandler.getTarget();
      activityStreamObject.generator = this.metadataHandler.getGenerator();
      activityStreamObject.provider = this.metadataHandler.getProvider();
      return activityStreamObject;
    };

    ActionLogger.prototype.log = function(verb, object, async) {
      var activityStreamObject, error, logListener, sendLogActionToListener, _i, _len, _ref;
      if (async == null) {
        async = true;
      }
      this.checkVerb(verb);
      activityStreamObject = {};
      try {
        activityStreamObject = this.createActivityStreamObject(verb, object);
        this.loggingTarget(activityStreamObject, async);
      } catch (_error) {
        error = _error;
        console.warn("something went wrong during logging:");
        console.warn(error);
      }
      sendLogActionToListener = function(logListener) {
        return logListener.logAction(activityStreamObject);
      };
      _ref = this.logListeners;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        logListener = _ref[_i];
        sendLogActionToListener(logListener);
      }
      return activityStreamObject;
    };

    ActionLogger.prototype.nullLogging = function(action) {};

    ActionLogger.prototype.consoleLogging = function(activityStreamObject) {
      return console.log(JSON.stringify(activityStreamObject, void 0, 2));
    };

    ActionLogger.prototype.getShortActionLogDescription = function(activityStreamObject) {
      var id, objectType, resourceType, verb;
      verb = activityStreamObject.verb;
      objectType = activityStreamObject.object.objectType;
      id = activityStreamObject.object.id ? activityStreamObject.object.id : "not specified";
      resourceType = activityStreamObject.target.objectType;
      return verb + " - " + objectType + " of " + resourceType + ", id: " + id;
    };

    ActionLogger.prototype.consoleLoggingShort = function(activityStreamObject) {
      return console.log("ActionLogger: " + (this.getShortActionLogDescription(activityStreamObject)));
    };

    ActionLogger.prototype.consoleLoggingObject = function(activityStreamObject) {
      console.log("ActionLogger: " + (this.getShortActionLogDescription(activityStreamObject)) + ", object:");
      return console.log(activityStreamObject.object);
    };

    ActionLogger.prototype.opensocialLogging = function(activityStreamObject) {
      var logObject, shortActionLogDescription;
      if (osapi !== void 0) {
        logObject = {
          "userId": "@viewer",
          "groupId": "@self",
          activity: activityStreamObject
        };
        shortActionLogDescription = this.getShortActionLogDescription(activityStreamObject);
        console.log("ActionLogger: logging to Graasp: " + shortActionLogDescription + ", logObject:");
        console.log(logObject);
        return osapi.activitystreams.create(logObject).execute((function(_this) {
          return function(response) {
            if (response.id !== void 0) {
              return console.log("ActionLogger: sucessfully logged via osapi, response.id: " + response.id);
            } else {
              console.warn("ActionLogger: something went wrong when sending log action (" + shortActionLogDescription + ") via osapi, response:");
              return console.warn(response);
            }
          };
        })(this));
      } else {
        return console.log("ActionLogger: can't log, osapi is undefined.");
      }
    };

    ActionLogger.prototype.httpPostLogging = function(activityStreamObject, async, loggingUrl) {
      var shortActionLogDescription;
      if (async == null) {
        async = true;
      }
      if (loggingUrl == null) {
        loggingUrl = this.loggingUrl;
      }
      shortActionLogDescription = this.getShortActionLogDescription(activityStreamObject);
      if (this._debug) {
        console.log("ActionLogger: logging to " + loggingUrl + ": " + shortActionLogDescription);
      }
      return $.ajax({
        type: "POST",
        url: loggingUrl,
        data: JSON.stringify(activityStreamObject),
        contentType: "application/json",
        success: (function(_this) {
          return function(responseData, textStatus, jqXHR) {
            if (_this._debug) {
              return console.log("POST actionlog success, response: " + responseData);
            }
          };
        })(this),
        error: (function(_this) {
          return function(responseData, textStatus, errorThrown) {
            console.log("POST actionlog (" + shortActionLogDescription + ") failed: " + responseData.status + " (" + responseData.statusText + "), response:");
            return console.log(JSON.stringify(responseData));
          };
        })(this)
      });
    };

    ActionLogger.prototype.logApplicationStarted = function() {
      var app, head, object;
      head = window.head || {};
      app = this.metadataHandler.getGenerator();
      if (!this.loggedApplicationStarted) {
        object = {
          id: app.id,
          objectType: "application",
          content: {
            device: {
              navigator: {
                appCodeName: navigator.appCodeName,
                appName: navigator.appName,
                appVersion: navigator.appVersion,
                geoLocation: navigator.geolocation,
                language: navigator.language,
                oscpu: navigator.oscpu,
                platform: navigator.platform,
                product: navigator.product,
                userAgent: navigator.userAgent
              },
              browser: head.browser,
              screen: head.screen,
              features: {
                mobile: head.mobile,
                desktop: head.desktop,
                touch: head.touch,
                portrait: head.portrait,
                landscape: head.landscape,
                retina: head.retina,
                transitions: head.transitions,
                transforms: head.transforms,
                gradients: head.gradients,
                multiplebgs: head.multiplebgs,
                boxshadow: head.boxshadow,
                borderimage: head.borderimage,
                borderradius: head.borderradius,
                cssreflections: head.cssreflections,
                fontface: head.fontface,
                rgba: head.rgba
              }
            }
          }
        };
        this.log(this.verbs.application_started, object);
        return this.loggedApplicationStarted = true;
      }
    };


    /*
      content-oriented
     */

    ActionLogger.prototype.logAdd = function(object) {
      return this.log(this.verbs.add, object);
    };

    ActionLogger.prototype.logRemove = function(object) {
      return this.log(this.verbs.remove, object);
    };

    ActionLogger.prototype.logChange = function(object) {
      return this.log(this.verbs.change, object);
    };

    ActionLogger.prototype.logClear = function(object) {
      if (object == null) {
        object = this.metadataHandler.getTarget();
      }
      return this.log(this.verbs.clear, object);
    };


    /*
     process-oriented
     */

    ActionLogger.prototype.logAccess = function(object) {
      return this.log(this.verbs.access, object);
    };

    ActionLogger.prototype.logStart = function(object) {
      return this.log(this.verbs.start, object);
    };

    ActionLogger.prototype.logCancel = function(object) {
      return this.log(this.verbs.cancel, object);
    };

    ActionLogger.prototype.logSend = function(object) {
      return this.log(this.verbs.send, object);
    };

    ActionLogger.prototype.logReceive = function(object) {
      return this.log(this.verbs.receive, object);
    };


    /*
      storage-oriented
     */

    ActionLogger.prototype.logNew = function(resource) {
      return this._logStorageAction(this.verbs["new"], resource);
    };

    ActionLogger.prototype.logLoad = function(resource, async) {
      if (async == null) {
        async = true;
      }
      return this._logStorageAction(this.verbs.open, resource, async);
    };

    ActionLogger.prototype.logSaveAs = function(resource) {
      return this._logStorageAction(this.verbs.create, resource);
    };

    ActionLogger.prototype.logSave = function(resource) {
      return this._logStorageAction(this.verbs.update, resource);
    };

    ActionLogger.prototype.logDelete = function(resource) {
      return this._logStorageAction(this.verbs["delete"], resource);
    };

    ActionLogger.prototype._logStorageAction = function(verb, resource, async) {
      var object;
      if (async == null) {
        async = true;
      }
      object = {
        objectType: "resource",
        content: resource
      };
      if (resource.metadata && resource.metadata.id) {
        object.id = resource.metadata.id;
      }
      return this.log(verb, object, async);
    };

    ActionLogger.prototype.verbs = {
      add: "add",
      remove: "remove",
      change: "change",
      clear: "clear",
      access: "access",
      start: "start",
      cancel: "cancel",
      send: "send",
      receive: "receive",
      "new": "new",
      open: "open",
      create: "create",
      update: "update",
      "delete": "delete",
      application_started: "access",
      phase_changed: "access"
    };

    return ActionLogger;

  })();

  window.ut.commons.actionlogging.ActionLoggerWrapper = (function() {
    function ActionLoggerWrapper(_at_actionLogger) {
      this.actionLogger = _at_actionLogger;
      if (!(this.actionLogger instanceof window.ut.commons.actionlogging.ActionLogger)) {
        throw "the actionLogger parameter must be an instance of window.ut.commons.actionlogging.ActionLogger";
      }
    }

    ActionLoggerWrapper.prototype.setLoggingTarget = function(newLoggingTarget) {
      return this.actionLogger.setLoggingTarget(newLoggingTarget);
    };

    ActionLoggerWrapper.prototype.getShortActionLogDescription = function(activityStreamObject) {
      return this.actionLogger.getShortActionLogDescription(activityStreamObject);
    };

    ActionLoggerWrapper.prototype.logApplicationStarted = function() {
      return this.actionLogger.logApplicationStarted();
    };


    /*
    content-oriented
     */

    ActionLoggerWrapper.prototype.logAdd = function(object) {
      return this.actionLogger.logAdd(object);
    };

    ActionLoggerWrapper.prototype.logRemove = function(object) {
      return this.actionLogger.logRemove(object);
    };

    ActionLoggerWrapper.prototype.logChange = function(object) {
      return this.actionLogger.logChange(object);
    };

    ActionLoggerWrapper.prototype.logClear = function(object) {
      return this.actionLogger.logClear(object);
    };


    /*
     process-oriented
     */

    ActionLoggerWrapper.prototype.logAccess = function(object) {
      return this.actionLogger.logAccess(object);
    };

    ActionLoggerWrapper.prototype.logStart = function(object) {
      return this.actionLogger.logStart(object);
    };

    ActionLoggerWrapper.prototype.logCancel = function(object) {
      return this.actionLogger.logCancel(object);
    };

    ActionLoggerWrapper.prototype.logSend = function(object) {
      return this.actionLogger.logSend(object);
    };

    ActionLoggerWrapper.prototype.logReceive = function(object) {
      return this.actionLogger.logReceive(object);
    };


    /*
      storage-oriented
     */

    ActionLoggerWrapper.prototype.logNew = function(resource) {
      return this.actionLogger.logNew(resource);
    };

    ActionLoggerWrapper.prototype.logLoad = function(resource) {
      return this.actionLogger.logLoad(resource);
    };

    ActionLoggerWrapper.prototype.logSaveAs = function(resource) {
      return this.actionLogger.logSaveAs(resource);
    };

    ActionLoggerWrapper.prototype.logSave = function(resource) {
      return this.actionLogger.logSave(resource);
    };

    ActionLoggerWrapper.prototype.logDelete = function(resource) {
      return this.actionLogger.logDelete(resource);
    };

    ActionLoggerWrapper.prototype.log = function(action, object) {
      return this.actionLogger.log(action, object);
    };

    return ActionLoggerWrapper;

  })();

}).call(this);

//# sourceMappingURL=ActionLogger.js.map
